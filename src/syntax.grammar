@top Program { expression* }

@skip { whitespace | LineComment }

expression {
  logical |
  number |
  null |
  Type |
  Char |
  String |
  Word |
  Color |
  Literal |
  SymbolLiteral |
  Inline
}

logical {
  kwn<"true" | "false" | "maybe", Logical>
}

number {
  Integer | Floating | Version
}

null { kw<"null"> }

Type { ":" identifier }

Literal { "'" identifier }
SymbolLiteral { "'" symbol }

Word { identifier }

Inline { "(" expression ")" }

@skip {} {
  String {
    '"' (Escape | stringContentQuoted)* '"'
  }
}

kw<term> { kwn<term, term> }
kwn<term, name> { @specialize[@name={name}]<identifier, term> }

@tokens {
  whitespace { std.whitespace+ }
  digit { std.digit }
  letter { std.asciiLetter }
  hex { std.digit | $[a-fA-F] }

  Integer { digit+ (("e" | "E") ("+" | "-")? digit+)? }
  Floating { digit+ "." digit+ }
  Version { digit+ "." digit+ "." digit+ (letter | digit | "+" | "-" | ".")* }
  @precedence { Version, Floating, Integer }

  Color { "#" (hex hex hex hex hex hex | letter+) }

  Char { "'" (Escape | ![']) "'" }
  Escape { "\\" _ }

  stringContentQuoted { ![\\\n"]+ }

  identifierChar { letter | "_" }
  identifier { identifierChar (identifierChar | digit | "?")* }

  symbol { "<=" | "=>" | "<=>" | "<<=" | "=>>" | "<<=>>" | "<-" | "->" | "<->" | "<<-" | "->>" | "<<->>" | "-<" | ">-" | ">-<" | "-<<" | ">>-" | ">>-<<" | "<<" | ">>" | "<<<" | ">>>" | "<--" | "-->" | "<-->" | "<==" | "==>" | "<==>" | "<~" | "~>" | "<~>" | "|>" | "<|" | "<|>" | "=<" | ">=" | "<>" | "<:" | "-:" | ">:" | "~" | "!" | "!!" | "?" | "??" | "@" | "#" | "##" | "###" | "####" | "#####" | "######" | "$" | "%" | "^" | "&" | "*" | "**" | "-" | "--" | "=" | "==" | "=~" | "+" | "++" | "<" | ">" | "/" | "/%" | "//" | "\\" | "\\\\" | "|" | "|-" | "|=" | ".." | "..." | "./" | ":" | "::" | ":=" | "||" | "∅" | "∞" | "∑" | "∏" | "∩" | "∪" | "⊂" | "⊃" | "⊆" | "⊇" | "∈" | "∉" | "∧" | "∨" | "⊻" | "⊼" | "¬" }

  LineComment { ";" ![\n]* }
}

@detectDelim

// @top Program { value* }

// @skip { whitespace+ | Comment }

// @precedence {
//   label @left
// }

// value {
//   Label | expression
// }

// expression {
//   logical | null | Word | Char | String | Integer | Floating | Version | Type
// }

// Label { Word !label ":" expression }

// Type { ":" identifier }

// null { kw<"null"> }
// logical { kwn<"true" | "false" | "maybe", Logical> }

// Word { identifier }

// Char { "`" char "`" }

// @skip {} {
//   String {
//     '"' (StringEscape | quotedStringContent)* '"' |
//     '{:' multilineStringContent* ':}' |
//     '{' multilineStringContent* '}'
//     //  |
//     // "«" whitespace* smartQuoteStringContent*
//   }
// }

// kw<term> { kwn<term, term> }
// kwn<term, name> { @specialize[@name={name}]<identifier, term> }

// @tokens { 
//   whitespace { std.whitespace }
//   digit { std.digit }
//   letter { std.asciiLetter }

//   char { ![`] }

//   Comment { ";" ![\n]* } 

//   @precedence { Comment, char, whitespace }

//   Escape { "\\" _ }
//   quotedStringContent { !["] }
//   smartQuoteStringContent { ![\n] }
//   multilineStringContent { ![}] }
//   dashStringContent { _ }

//   @precedence { dashStringContent, Comment, whitespace }

//   @precedence { StringEscape, smartQuoteStringContent, multilineStringContent, quotedStringContent }

//   Integer { digit+ (("e" | "E") ("+" | "-")? digit+)? }
//   Floating { digit+ "." digit+ }
//   Version { digit+ "." digit+ "." digit+ (letter | digit | "+" | "-" | ".")* }
//   @precedence { Version, Floating, Integer }

//   identifierChar { letter | "_" }
//   identifier { identifierChar (identifierChar | digit | "?")* }

//   @precedence { identifier, whitespace }  
// }

// @detectDelim

// // Symbol { "<=" | "=>" | "<=>" | "<<=" | "=>>" | "<<=>>" | "<-" | "->" | "<->" | "<<-" | "->>" | "<<->>" | "-<" | ">-" | ">-<" | "-<<" | ">>-" | ">>-<<" | "<<" | ">>" | "<<<" | ">>>" | "<--" | "-->" | "<-->" | "<==" | "==>" | "<==>" | "<~" | "~>" | "<~>" | "|>" | "<|" | "<|>" | "=<" | ">=" | "<>" | "<:" | "-:" | ">:" | "~" | "!" | "!!" | "?" | "??" | "@" | "#" | "##" | "###" | "####" | "#####" | "######" | "$" | "%" | "^" | "&" | "*" | "**" | "-" | "--" | "=" | "==" | "=~" | "+" | "++" | "<" | ">" | "/" | "/%" | "//" | "\\" | "\\\\" | "|" | "|-" | "|=" | ".." | "..." | "./" | ":" | "::" | ":=" | "||" | "∅" | "∞" | "∑" | "∏" | "∩" | "∪" | "⊂" | "⊃" | "⊆" | "⊇" | "∈" | "∉" | "∧" | "∨" | "⊻" | "⊼" | "¬" }
// // Identifier {
// //   (Letters | "_") (Letters | Numbers | "_" | "?")*
// // }
// // @precedence { Identifier, Letters, Numbers }
// // Numbers                    { $[0-9] }
// // PermittedNumbers_Start     { Numbers }
// // ScientificNotation         { PermittedNumbers_Start | "+" | "-" }
// // ScientificNotation_Start   { "e" | "E" }
// // Symbols                    { "~" | "!" | "@" | "#" | "$" | "%" | "^" | "&" | "*" | "-" | "=" | "+" | "<" | ">" | "/" | "|" | "?" }
// // Letters                    { $[a-zA-Z] }

// // PermittedColorChars        { Letters | Numbers }

// // PermittedQuantityChars     { Letters | Numbers | "." | "/" }  
// // SemVerExtra                { Letters | PermittedNumbers_Start | "+" | "-" | "." }